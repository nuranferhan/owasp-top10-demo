#!/usr/bin/env python3
"""
OWASP Top 10 - Sensitive Data Exposure Testing
Comprehensive Data Exposure Vulnerability Scanner
"""

import requests
import sys
import json
import time
import re
from urllib.parse import urljoin, urlparse
import warnings
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

class SensitiveDataExposure:
    def __init__(self, target_url="http://localhost:3000"):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()
        self.vulnerabilities_found = []
        
        # Common sensitive file patterns
        self.sensitive_files = [
            '/.env',
            '/.env.local',
            '/.env.production',
            '/config.php',
            '/database.php',
            '/wp-config.php',
            '/web.config',
            '/app.config',
            '/settings.py',
            '/config.json',
            '/database.json',
            '/secrets.json',
            '/credentials.json',
            '/backup.sql',
            '/dump.sql',
            '/database.sql',
            '/users.sql',
            '/admin.sql',
            '/password.txt',
            '/passwords.txt',
            '/users.txt',
            '/secrets.txt',
            '/keys.txt',
            '/api_keys.txt',
            '/tokens.txt',
            '/.git/config',
            '/.git/HEAD',
            '/.git/logs/HEAD',
            '/.svn/entries',
            '/.svn/wc.db',
            '/CVS/Entries',
            '/CVS/Root',
            '/.DS_Store',
            '/Thumbs.db',
            '/desktop.ini',
            '/.htaccess',
            '/.htpasswd',
            '/robots.txt',
            '/sitemap.xml',
            '/crossdomain.xml',
            '/clientaccesspolicy.xml',
            '/phpinfo.php',
            '/info.php',
            '/test.php',
            '/debug.php',
            '/server-status',
            '/server-info',
            '/status',
            '/info',
            '/debug',
            '/trace',
            '/logs/',
            '/log/',
            '/admin/',
            '/administrator/',
            '/management/',
            '/manager/',
            '/console/',
            '/dashboard/',
            '/panel/',
            '/control/',
            '/api/',
            '/api/v1/',
            '/api/v2/',
            '/rest/',
            '/graphql',
            '/swagger/',
            '/docs/',
            '/documentation/',
            '/readme.txt',
            '/README.md',
            '/CHANGELOG.txt',
            '/VERSION',
            '/version.txt',
            '/build.xml',
            '/pom.xml',
            '/package.json',
            '/composer.json',
            '/requirements.txt',
            '/Gemfile',
            '/Dockerfile',
            '/docker-compose.yml',
            '/docker-compose.yaml',
            '/backup/',
            '/backups/',
            '/tmp/',
            '/temp/',
            '/cache/',
            '/uploads/',
            '/files/',
            '/documents/',
            '/downloads/',
            '/private/',
            '/confidential/',
            '/internal/',
            '/dev/',
            '/development/',
            '/staging/',
            '/test/',
            '/testing/'
        ]
        
        # API endpoints to test
        self.api_endpoints = [
            '/api/users',
            '/api/user',
            '/api/admin',
            '/api/config',
            '/api/settings',
            '/api/database',
            '/api/backup',
            '/api/logs',
            '/api/debug',
            '/api/status',
            '/api/health',
            '/api/info',
            '/api/version',
            '/api/keys',
            '/api/tokens',
            '/api/secrets',
            '/rest/users',
            '/rest/config',
            '/rest/admin',
            '/graphql?query={users{id,username,email,password}}',
            '/v1/users',
            '/v2/users',
            '/admin/api/users',
            '/internal/api/users',
            '/debug/users',
            '/test/users'
        ]
        
        # Sensitive data patterns
        self.sensitive_patterns = {
            'passwords': [
                r'password["\s]*[:=]["\s]*[^"\s,}]+',
                r'pwd["\s]*[:=]["\s]*[^"\s,}]+',
                r'pass["\s]*[:=]["\s]*[^"\s,}]+',
                r'secret["\s]*[:=]["\s]*[^"\s,}]+',
                r'key["\s]*[:=]["\s]*[^"\s,}]+',
                r'token["\s]*[:=]["\s]*[^"\s,}]+',
                r'api_key["\s]*[:=]["\s]*[^"\s,}]+',
                r'apikey["\s]*[:=]["\s]*[^"\s,}]+',
                r'access_token["\s]*[:=]["\s]*[^"\s,}]+',
                r'auth_token["\s]*[:=]["\s]*[^"\s,}]+'
            ],
            'database': [
                r'database["\s]*[:=]["\s]*[^"\s,}]+',
                r'db_[a-z]+["\s]*[:=]["\s]*[^"\s,}]+',
                r'mysql["\s]*[:=]["\s]*[^"\s,}]+',
                r'postgresql["\s]*[:=]["\s]*[^"\s,}]+',
                r'mongodb["\s]*[:=]["\s]*[^"\s,}]+',
                r'redis["\s]*[:=]["\s]*[^"\s,}]+',
                r'connection_string["\s]*[:=]["\s]*[^"\s,}]+',
                r'conn_str["\s]*[:=]["\s]*[^"\s,}]+'
            ],
            'emails': [
                r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}',
                r'email["\s]*[:=]["\s]*[^"\s,}]+'
            ],
            'personal_info': [
                r'ssn["\s]*[:=]["\s]*[^"\s,}]+',
                r'social_security["\s]*[:=]["\s]*[^"\s,}]+',
                r'credit_card["\s]*[:=]["\s]*[^"\s,}]+',
                r'card_number["\s]*[:=]["\s]*[^"\s,}]+',
                r'phone["\s]*[:=]["\s]*[^"\s,}]+',
                r'address["\s]*[:=]["\s]*[^"\s,}]+'
            ]
        }
    
    def banner(self):
        print("=" * 80)
        print("üîç SENSITIVE DATA EXPOSURE VULNERABILITY TESTER")
        print("=" * 80)
        print(f"Target: {self.target_url}")
        print(f"Time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
    
    def test_sensitive_files(self):
        """Test for exposed sensitive files"""
        print("\nüîç [1/8] Testing Sensitive File Exposure...")
        
        found_files = []
        
        for file_path in self.sensitive_files:
            try:
                full_url = urljoin(self.target_url, file_path)
                response = self.session.get(full_url, timeout=5)
                
                if response.status_code == 200 and len(response.content) > 10:
                    print(f"   ‚úÖ Exposed file found: {file_path}")
                    found_files.append(file_path)
                    
                    # Analyze content for sensitive data
                    self.analyze_sensitive_content(file_path, response.text)
                    
                elif response.status_code == 403:
                    print(f"   ‚ö†Ô∏è  Forbidden but exists: {file_path}")
                elif response.status_code not in [404, 500]:
                    print(f"   ‚ö†Ô∏è  Unusual response ({response.status_code}): {file_path}")
                    
            except requests.exceptions.RequestException:
                pass
            except Exception as e:
                print(f"   ‚ùå Error testing {file_path}: {str(e)}")
        
        if found_files:
            self.vulnerabilities_found.extend([f"Sensitive file exposure - {f}" for f in found_files])
        
        print(f"   üìä Sensitive file tests completed. Found: {len(found_files)} exposed files")
    
    def test_api_endpoints(self):
        """Test API endpoints for data exposure"""
        print("\nüîç [2/8] Testing API Endpoint Data Exposure...")
        
        exposed_apis = []
        
        for endpoint in self.api_endpoints:
            try:
                full_url = urljoin(self.target_url, endpoint)
                response = self.session.get(full_url, timeout=5)
                
                if response.status_code == 200:
                    try:
                        # Try to parse as JSON
                        json_data = response.json()
                        if isinstance(json_data, (list, dict)) and json_data:
                            print(f"   ‚úÖ API endpoint exposed: {endpoint}")
                            exposed_apis.append(endpoint)
                            
                            # Check for sensitive data in API response
                            self.analyze_json_data(endpoint, json_data)
                            
                    except json.JSONDecodeError:
                        # Check if response contains structured data
                        if any(keyword in response.text.lower() for keyword in 
                               ['password', 'email', 'token', 'key', 'secret', 'user']):
                            print(f"   ‚úÖ API endpoint with data: {endpoint}")
                            exposed_apis.append(endpoint)
                            self.analyze_sensitive_content(endpoint, response.text)
                
                elif response.status_code == 401:
                    print(f"   ‚ö†Ô∏è  Authentication required: {endpoint}")
                elif response.status_code == 403:
                    print(f"   ‚ö†Ô∏è  Forbidden but exists: {endpoint}")
                    
            except requests.exceptions.RequestException:
                pass
            except Exception as e:
                print(f"   ‚ùå Error testing {endpoint}: {str(e)}")
        
        if exposed_apis:
            self.vulnerabilities_found.extend([f"API data exposure - {api}" for api in exposed_apis])
        
        print(f"   üìä API endpoint tests completed. Found: {len(exposed_apis)} exposed APIs")
    
    def test_directory_traversal(self):
        """Test for directory traversal to sensitive files"""
        print("\nüîç [3/8] Testing Directory Traversal for Sensitive Files...")
        
        traversal_payloads = [
            '../../../etc/passwd',
            '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            '../../../windows/win.ini',
            '../../../etc/shadow',
            '../../../var/log/apache2/error.log',
            '../../../var/log/nginx/error.log',
            '../../../proc/version',
            '../../../proc/cmdline',
            '../config.php',
            '../../config.php',
            '../../../config.php',
            '../.env',
            '../../.env',
            '../../../.env'
        ]
        
        test_parameters = ['file', 'path', 'page', 'doc', 'document', 'view', 'template']
        
        found_traversals = []
        
        for param in test_parameters:
            for payload in traversal_payloads:
                try:
                    params = {param: payload}
                    response = self.session.get(self.target_url, params=params, timeout=5)
                    
                    # Check for signs of successful traversal
                    content_lower = response.text.lower()
                    
                    if any(indicator in content_lower for indicator in 
                           ['root:', 'password', 'database', '[extensions]', 'version_info']):
                        print(f"   ‚úÖ Directory traversal successful: {param}={payload}")
                        found_traversals.append(f"{param}={payload}")
                        self.vulnerabilities_found.append(f"Directory traversal - {param}={payload}")
                        
                except requests.exceptions.RequestException:
                    pass
                except Exception as e:
                    continue
        
        print(f"   üìä Directory traversal tests completed. Found: {len(found_traversals)} successful traversals")
    
    def test_backup_files(self):
        """Test for exposed backup files"""
        print("\nüîç [4/8] Testing Backup File Exposure...")
        
        backup_extensions = ['.bak', '.backup', '.old', '.orig', '.copy', '.tmp', '.~', '.swp']
        backup_prefixes = ['backup_', 'bak_', 'old_', 'copy_', 'tmp_']
        
        # Common file types to check for backups
        common_files = [
            'index.php', 'config.php', 'database.php', 'admin.php', 'login.php',
            'user.php', 'settings.php', 'install.php', 'setup.php', 'update.php',
            'index.html', 'admin.html', 'login.html', 'config.html',
            'web.config', 'app.config', '.htaccess', 'robots.txt'
        ]
        
        found_backups = []
        
        # Test backup extensions
        for file in common_files:
            for ext in backup_extensions:
                backup_file = f"/{file}{ext}"
                try:
                    response = self.session.get(f"{self.target_url}{backup_file}", timeout=3)
                    if response.status_code == 200 and len(response.content) > 50:
                        print(f"   ‚úÖ Backup file found: {backup_file}")
                        found_backups.append(backup_file)
                        self.analyze_sensitive_content(backup_file, response.text)
                except:
                    pass
        
        # Test backup prefixes
        for file in common_files:
            for prefix in backup_prefixes:
                backup_file = f"/{prefix}{file}"
                try:
                    response = self.session.get(f"{self.target_url}{backup_file}", timeout=3)
                    if response.status_code == 200 and len(response.content) > 50:
                        print(f"   ‚úÖ Backup file found: {backup_file}")
                        found_backups.append(backup_file)
                        self.analyze_sensitive_content(backup_file, response.text)
                except:
                    pass
        
        if found_backups:
            self.vulnerabilities_found.extend([f"Backup file exposure - {f}" for f in found_backups])
        
        print(f"   üìä Backup file tests completed. Found: {len(found_backups)} backup files")
    
    def test_source_code_exposure(self):
        """Test for exposed source code"""
        print("\nüîç [5/8] Testing Source Code Exposure...")
        
        source_files = [
            '/.git/config',
            '/.git/HEAD',
            '/.git/logs/HEAD',
            '/.git/index',
            '/.git/objects/',
            '/.svn/entries',
            '/.svn/wc.db',
            '/CVS/Entries',
            '/package.json',
            '/composer.json',
            '/requirements.txt',
            '/Gemfile',
            '/pom.xml',
            '/build.xml',
            '/gulpfile.js',
            '/webpack.config.js',
            '/.babelrc',
            '/.gitignore',
            '/README.md',
            '/CHANGELOG.md',
            '/TODO.txt',
            '/src/',
            '/source/',
            '/app/',
            '/lib/',
            '/includes/',
            '/vendor/',
            '/node_modules/'
        ]
        
        exposed_sources = []
        
        for source in source_files:
            try:
                response = self.session.get(f"{self.target_url}{source}", timeout=3)
                if response.status_code == 200 and len(response.content) > 20:
                    print(f"   ‚úÖ Source code/metadata exposed: {source}")
                    exposed_sources.append(source)
                    
                    # Check for sensitive information in source
                    if any(keyword in response.text.lower() for keyword in 
                           ['password', 'secret', 'key', 'token', 'database']):
                        print(f"   üö® Sensitive data in source: {source}")
                        self.vulnerabilities_found.append(f"Sensitive data in source - {source}")
                    else:
                        self.vulnerabilities_found.append(f"Source code exposure - {source}")
                        
            except:
                pass
        
        print(f"   üìä Source code tests completed. Found: {len(exposed_sources)} exposed sources")
    
    def test_error_messages(self):
        """Test for sensitive information in error messages"""
        print("\nüîç [6/8] Testing Error Message Information Disclosure...")
        
        error_triggers = [
            '/nonexistent_page_12345',
            '/admin/nonexistent',
            '/api/invalid_endpoint',
            '/login?error=test',
            '/search?q=\'',
            '/user/999999',
            '/config/invalid',
            '/database/test',
            '/debug/error'
        ]
        
        sensitive_errors = []
        
        for trigger in error_triggers:
            try:
                response = self.session.get(f"{self.target_url}{trigger}", timeout=5)
                
                # Look for sensitive information in error messages
                content_lower = response.text.lower()
                
                if any(keyword in content_lower for keyword in 
                       ['database', 'mysql', 'postgresql', 'sqlite', 'connection', 
                        'server', 'path', 'directory', 'file not found', 'stack trace',
                        'exception', 'error in', 'warning in', 'fatal error']):
                    
                    print(f"   ‚ö†Ô∏è  Verbose error message: {trigger}")
                    sensitive_errors.append(trigger)
                    self.analyze_sensitive_content(f"Error - {trigger}", response.text)
                    
            except:
                pass
        
        if sensitive_errors:
            self.vulnerabilities_found.extend([f"Information disclosure - error messages" for _ in sensitive_errors])
        
        print(f"   üìä Error message tests completed. Found: {len(sensitive_errors)} verbose errors")
    
    def test_debug_endpoints(self):
        """Test for debug endpoints that may expose sensitive information"""
        print("\nüîç [7/8] Testing Debug Endpoint Exposure...")
        
        debug_endpoints = [
            '/debug',
            '/debug.php',
            '/debug.html',
            '/debug/info',
            '/debug/config',
            '/debug/database',
            '/debug/users',
            '/debug/logs',
            '/phpinfo.php',
            '/info.php',
            '/test.php',
            '/dev.php',
            '/development.php',
            '/trace',
            '/trace.php',
            '/monitor',
            '/status',
            '/health',
            '/metrics',
            '/stats',
            '/diagnostic',
            '/profiler',
            '/xdebug',
            '/var_dump',
            '/print_r'
        ]
        
        exposed_debug = []
        
        for endpoint in debug_endpoints:
            try:
                response = self.session.get(f"{self.target_url}{endpoint}", timeout=5)
                
                if response.status_code == 200 and len(response.content) > 100:
                    content_lower = response.text.lower()
                    
                    # Check for debug-specific content
                    if any(keyword in content_lower for keyword in 
                           ['php version', 'server api', 'build date', 'configuration',
                            'environment', 'variables', 'loaded modules', 'debug',
                            'trace', 'backtrace', 'stack', 'memory usage']):
                        
                        print(f"   ‚úÖ Debug endpoint exposed: {endpoint}")
                        exposed_debug.append(endpoint)
                        self.vulnerabilities_found.append(f"Debug endpoint exposure - {endpoint}")
                        
            except:
                pass
        
        print(f"   üìä Debug endpoint tests completed. Found: {len(exposed_debug)} debug endpoints")
    
    def test_database_files(self):
        """Test for exposed database files"""
        print("\nüîç [8/8] Testing Database File Exposure...")
        
        database_files = [
            '/database.db',
            '/database.sqlite',
            '/database.sqlite3',
            '/app.db',
            '/users.db',
            '/data.db',
            '/main.db',
            '/backup.db',
            '/test.db',
            '/dev.db',
            '/production.db',
            '/staging.db',
            '/database.mdb',
            '/database.accdb',
            '/data.mdb',
            '/users.mdb',
            '/backup.sql',
            '/dump.sql',
            '/database.sql',
            '/users.sql',
            '/data.sql',
            '/schema.sql'
        ]
        
        exposed_databases = []
        
        for db_file in database_files:
            try:
                response = self.session.get(f"{self.target_url}{db_file}", timeout=5)
                
                if response.status_code == 200 and len(response.content) > 50:
                    print(f"   üö® CRITICAL: Database file exposed: {db_file}")
                    exposed_databases.append(db_file)
                    self.vulnerabilities_found.append(f"Database file exposure - {db_file}")
                    
                    # Check if it's actually a database file
                    content = response.content
                    if (content.startswith(b'SQLite format') or 
                        b'CREATE TABLE' in content or
                        b'INSERT INTO' in content):
                        print(f"   üö® CONFIRMED: Valid database file - {db_file}")
                        
            except:
                pass
        
        print(f"   üìä Database file tests completed. Found: {len(exposed_databases)} database files")
    
    def analyze_sensitive_content(self, source, content):
        """Analyze content for sensitive data patterns"""
        content_lower = content.lower()
        
        for category, patterns in self.sensitive_patterns.items():
            for pattern in patterns:
                matches = re.findall(pattern, content_lower, re.IGNORECASE)
                if matches:
                    print(f"   üö® {category.upper()} found in {source}: {len(matches)} matches")
                    self.vulnerabilities_found.append(f"Sensitive {category} in {source}")
    
    def analyze_json_data(self, endpoint, data):
        """Analyze JSON data for sensitive information"""
        json_str = json.dumps(data, default=str).lower()
        
        sensitive_keys = [
            'password', 'passwd', 'pwd', 'pass', 'secret', 'key', 'token',
            'api_key', 'apikey', 'access_token', 'auth_token', 'session_token',
            'private_key', 'secret_key', 'database', 'db_password', 'db_pass',
            'mysql_password', 'postgres_password', 'mongodb_password',
            'redis_password', 'connection_string', 'conn_str', 'dsn'
        ]
        
        found_sensitive = []
        for key in sensitive_keys:
            if key in json_str:
                found_sensitive.append(key)
        
        if found_sensitive:
            print(f"   üö® Sensitive keys in {endpoint}: {', '.join(found_sensitive)}")
            self.vulnerabilities_found.append(f"Sensitive data in API - {endpoint}")
    
    def generate_report(self):
        """Generate comprehensive vulnerability report"""
        print("\n" + "=" * 80)
        print("üìã SENSITIVE DATA EXPOSURE ASSESSMENT REPORT")
        print("=" * 80)
        
        print(f"üéØ Target: {self.target_url}")
        print(f"üìÖ Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üîç Total Vulnerabilities Found: {len(self.vulnerabilities_found)}")
        
        if self.vulnerabilities_found:
            print("\nüö® SENSITIVE DATA EXPOSURE VULNERABILITIES:")
            print("-" * 60)
            
            # Categorize vulnerabilities
            vuln_categories = {}
            for vuln in self.vulnerabilities_found:
                category = vuln.split(' - ')[0] if ' - ' in vuln else vuln.split(' ')[0]
                if category not in vuln_categories:
                    vuln_categories[category] = []
                vuln_categories[category].append(vuln)
            
            for category, vulns in vuln_categories.items():
                print(f"\nüìÇ {category.upper()}:")
                for vuln in vulns:
                    print(f"   ‚Ä¢ {vuln}")
            
            # Risk assessment
            critical_count = len([v for v in self.vulnerabilities_found if any(x in v.lower() for x in ['database', 'password', 'secret', 'key'])])
            high_count = len([v for v in self.vulnerabilities_found if any(x in v.lower() for x in ['api', 'debug', 'source'])])
            
            print(f"\nüî• RISK ASSESSMENT:")
            print(f"   üö® CRITICAL: {critical_count} critical data exposures")
            print(f"   ‚ö†Ô∏è  HIGH: {high_count} high-risk information disclosures")
            print(f"   üìä TOTAL: {len(self.vulnerabilities_found)} data exposure issues")
            
        else:
            print("\n‚úÖ No sensitive data exposure vulnerabilities detected")
        
        print("\nüìù DATA PROTECTION RECOMMENDATIONS:")
        print("-" * 50)
        print("1. Remove or restrict access to sensitive files (.env, config files)")
        print("2. Implement proper API authentication and authorization")
        print("3. Disable debug modes and error details in production")
        print("4. Secure backup files and remove unnecessary copies")
        print("5. Implement proper access controls on directories")
        print("6. Remove source code and development files from production")
        print("7. Configure web server to prevent directory listing")
        print("8. Use environment variables for sensitive configuration")
        print("9. Implement proper logging without exposing sensitive data")
        print("10. Regular security audits and penetration testing")
        
        print("\n" + "=" * 80)
    
    def save_results_to_file(self):
        """Save detailed results to JSON file"""
        try:
            report_data = {
                'target': self.target_url,
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'test_type': 'Sensitive Data Exposure Assessment',
                'vulnerabilities_found': self.vulnerabilities_found,
                'total_vulnerabilities': len(self.vulnerabilities_found),
                'risk_level': 'CRITICAL' if len(self.vulnerabilities_found) >= 10 else 'HIGH' if len(self.vulnerabilities_found) >= 5 else 'MEDIUM' if len(self.vulnerabilities_found) >= 1 else 'LOW'
            }
            
            filename = f"sensitive_data_exposure_report_{int(time.time())}.json"
            with open(filename, 'w') as f:
                json.dump(report_data, f, indent=2)
            
            print(f"üíæ Detailed report saved to: {filename}")
            
        except Exception as e:
            print(f"‚ùå Error saving report: {str(e)}")
    
    def run_comprehensive_test(self):
        """Run all sensitive data exposure tests"""
        self.banner()
        
        try:
            print(f"\nüîÑ Testing connectivity to {self.target_url}...")
            response = requests.get(self.target_url, timeout=5)
            if response.status_code not in [200, 302, 401, 403]:
                print(f"‚ùå Target not accessible (Status: {response.status_code})")
                return
            print(f"‚úÖ Target is accessible")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Cannot connect to target: {e}")
            return
        
        # Run all sensitive data exposure tests
        self.test_sensitive_files()
        self.test_api_endpoints()
        self.test_directory_traversal()
        self.test_backup_files()
        self.test_source_code_exposure()
        self.test_error_messages()
        self.test_debug_endpoints()
        self.test_database_files()
        
        # Generate comprehensive report
        self.generate_report()
        
        # Save results
        self.save_results_to_file()

def main():
    if len(sys.argv) > 1:
        target_url = sys.argv[1]
    else:
        print("üîç OWASP Top 10 - Sensitive Data Exposure Tester")
        print("=" * 50)
        print("Usage: python3 sensitive_data_exposure.py <target_url>")
        print("Example: python3 sensitive_data_exposure.py http://localhost:3000")
        print("\nThis tool will test for sensitive data exposure:")
        print("‚Ä¢ Exposed configuration files")
        print("‚Ä¢ API data leakage")
        print("‚Ä¢ Directory traversal vulnerabilities")
        print("‚Ä¢ Backup file exposure")
        print("‚Ä¢ Source code disclosure")
        print("‚Ä¢ Verbose error messages")
        print("‚Ä¢ Debug endpoint exposure")
        print("‚Ä¢ Database file exposure")
        sys.exit(1)
    
    tester = SensitiveDataExposure(target_url)
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()